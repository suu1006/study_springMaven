/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-06-30 01:11:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.imageboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class imageboardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#currentPaging {\r\n");
      out.write("	color : red;\r\n");
      out.write("	text-deciration : underline;\r\n");
      out.write("	cursor : pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#paging {\r\n");
      out.write("	color : black;\r\n");
      out.write("	text-decoration : none;\r\n");
      out.write("	 cursor : pointer; \r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<input type=\"text\" id = \"pg\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.pg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("<form id = \"imageboardListForm\" method=\"get\" action=\"/SpringProject/imageboard/imageboardDelete\">\r\n");
      out.write("<table id= \"imageboardListTable\" border =\"1\" cellpadding=\"5\" frame=\"hsides\" rules=\"rows\"> <!-- cellpadding - 간격! hside : 한줄만 나와라! rules=\"rows\" 행단위로!-->\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th width=\"100\"><input type=\"checkbox\" id=\"all\">번호</th> <!--전부 선택 / 전부 해제 -->\r\n");
      out.write("		<th width=\"150\">이미지</th>\r\n");
      out.write("		<th width=\"150\">상품명</th>\r\n");
      out.write("		<th width=\"150\">단가</th>\r\n");
      out.write("		<th width=\"150\">개수</th>\r\n");
      out.write("		<th width=\"150\">합계</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	<!-- 동적 처리 -->\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<input type=\"button\" value=\"선택삭제\" id = \"imageboardDeleteBtn\" style=\"margin:5px 10px; float:left;\"> <!-- 좌우 , 위아래 -->\r\n");
      out.write("<div id = \"imageboardPagingDiv\" style=\"border: 1px solid red; width:750px; float:left; text-align:center;\">\r\n");
      out.write("	<!-- 동적 처리 -->\r\n");
      out.write("</div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"  src=\"http://code.jQuery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function imageboardPaging(pg2) { /* 지역변수이기때문에 이 안에서만 써먹는것. 10번 라인에 있는 pg랑 헷갈리니까 pg2로 잡음.  */\r\n");
      out.write("	location.href=\"/SpringProject/imageboard/imageboardList?pg=\" + pg2; /* 변수명은 pg고 넘어가는 값은 pg2니까 헷갈리지 말기~! */\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type:'post',\r\n");
      out.write("		url:'/SpringProject/imageboard/getImageboardList', \r\n");
      out.write("		data:{'pg' : $('#pg').val()},\r\n");
      out.write("		dataType: 'json',\r\n");
      out.write("		success : function(data){ // list를 통해서 데이터 받아와야함\r\n");
      out.write("			//colsole.log(JSON.stringify(data));\r\n");
      out.write("			//location.href = '/SpringProject/imageboard/imageboardList';\r\n");
      out.write("			$.each(data.list, function(index,items){\r\n");
      out.write("				$('<tr/>').append($('<td/>',{\r\n");
      out.write("					align:'center', // 가운데 정렬\r\n");
      out.write("					text:items.seq\r\n");
      out.write("					}).prepend($('<input/>', {\r\n");
      out.write("						type: 'checkbox',\r\n");
      out.write("						name: 'check',\r\n");
      out.write("						value: items.seq\r\n");
      out.write("					}))\r\n");
      out.write("				).append($('<td/>',{\r\n");
      out.write("					align:'center', // 가운데 정렬\r\n");
      out.write("					\r\n");
      out.write("					}).append($('<img/>', {\r\n");
      out.write("						src:'/SpringProject/storage/'+items.image1,\r\n");
      out.write("						style:'width:70px; height:70px;'\r\n");
      out.write("					}))\r\n");
      out.write("				\r\n");
      out.write("				).append($('<td/>',{\r\n");
      out.write("					align:'center', // 가운데 정렬\r\n");
      out.write("					text:items.imageName\r\n");
      out.write("				})).append($('<td/>',{\r\n");
      out.write("					align:'center', // 가운데 정렬\r\n");
      out.write("					text:items.imagePrice.toLocaleString()\r\n");
      out.write("				})).append($('<td/>',{\r\n");
      out.write("					align:'center', // 가운데 정렬\r\n");
      out.write("					text:items.imageQty\r\n");
      out.write("				})).append($('<td/>',{\r\n");
      out.write("					align:'center', // 가운데 정렬\r\n");
      out.write("					text:(items.imagePrice * items.imageQty).toLocaleString() /* toLocaleString(): 3자리 수 마다 끊어서 쉼표찍히게 하기 */\r\n");
      out.write("				})).appendTo($('#imageboardListTable'));\r\n");
      out.write("			}); // each\r\n");
      out.write("			\r\n");
      out.write("			//페이징 처리\r\n");
      out.write("			$('#imageboardPagingDiv').html(data.imageboardPaging.pagingHTML);\r\n");
      out.write("		}, \r\n");
      out.write("			error : function(err) {\r\n");
      out.write("				console.log(err);\r\n");
      out.write("		}\r\n");
      out.write("	}); // $.ajax\r\n");
      out.write("	\r\n");
      out.write("	//전체 선택 또는 전체 해제\r\n");
      out.write("	$('#all').click(function(){\r\n");
      out.write("		// alert($('#all').attr('checked')); /* >>이러면 결과가 안나옴. >  'checked' 의 문자열을 찾기때문에 결과가 나오지 않음. attr은 문자열로 꺼내온다. true/false를 받아와야하니까 prop(property)를 써야함 */\r\n");
      out.write("		//checked라는 속성이 없어서 undefined라고 나온다.\r\n");
      out.write("		//alert($('#all').prop('checked'));\r\n");
      out.write("		\r\n");
      out.write("		if($('#all').prop('checked')) /* // submit은 name속성밖에 안먹음. */\r\n");
      out.write("			$('input[name=\"check\"]').prop('checked', true);\r\n");
      out.write("		else\r\n");
      out.write("			$('input[name=\"check\"]').prop('checked', false);\r\n");
      out.write("	});\r\n");
      out.write("		\r\n");
      out.write("	//선택삭제\r\n");
      out.write("	$('#imageboardDeleteBtn').click(function(){\r\n");
      out.write("		var count = $('input[name=\"check\"]:checked').length; /* 체크된 애들이 몇개인지 센다. */\r\n");
      out.write("		if(count==0) \r\n");
      out.write("			alert('삭제할 항목을 선택하세요.');\r\n");
      out.write("		else \r\n");
      out.write("			if(confirm('정말로 삭제하시겠습니까?')) $('#imageboardListForm').submit();	\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
